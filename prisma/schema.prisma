// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  systemAuth  String
  idAuth      String
  customGates CustomGate[]
  customAlgorithms CustomAlgorithm[]
  customCompositeGates CustomCompositeGate[]
  userCalculations Calculations[]
  userImages Images[]
  userVideos Videos[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@unique([systemAuth, idAuth])
  @@index([systemAuth])
  @@index([idAuth])
}

model CustomCompositeGate {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  gates            Json
  author           User     @relation(fields: [authorId], references: [id])
  authorId         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([authorId])
}


model CustomGate {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  complexOneOne    Float
  complexOneTwo    Float
  complexTwoOne    Float
  complexTwoTwo    Float
  complexThreeOne  Float
  complexThreeTwo  Float
  complexFourOne   Float
  complexFourTwo   Float
  author           User     @relation(fields: [authorId], references: [id])
  authorId         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([authorId])
}

model CustomAlgorithm  {
  id               Int      @id @default(autoincrement())
  title            String
  description      String
  qubit            Int
  column           Int
  data             Json
  author           User     @relation(fields: [authorId], references: [id])
  authorId         Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([authorId])
}

enum ComputerType {
  virtual_machine
  physical_machine
  quantum_computer
}

enum JobsType {
  calculations
  images
  videos
}

model Configurations {
  id               String  @id
  name             String @default("")
  type             ComputerType
  jobs             JobsType
  works            Boolean @default(false)
  calculations     Calculations[]
  images           Images[]
  videos           Videos[]
}

enum CalculationsType {
  schema
  code
  image
}

enum CalculationsStatus {
  queued
  calculated
  success
  error
}

model Calculations{
  id               Int      @id @default(autoincrement())
  type             CalculationsType
  status           CalculationsStatus
  src              Json
  result           Json
  metrics          Json
  idConfigurations Configurations @relation(fields: [confId], references: [id])
  confId           String
  author           User     @relation(fields: [authorId], references: [id])
  authorId         Int
  sentEmail        Boolean? @default(dbgenerated("NULL"))
  errorText        String?  @default(dbgenerated("NULL"))
  createdAt        DateTime @default(now())
  startAt          DateTime
  finishAt         DateTime

  @@index([authorId])
}

model Images{
  id               Int      @id @default(autoincrement())
  type             CalculationsType
  status           CalculationsStatus
  src              String? @default(dbgenerated("NULL"))
  result           String? @default(dbgenerated("NULL"))
  metrics          Json
  idConfigurations Configurations @relation(fields: [confId], references: [id])
  confId           String
  author           User     @relation(fields: [authorId], references: [id])
  authorId         Int
  sentEmail        Boolean? @default(dbgenerated("NULL"))
  errorText        String?  @default(dbgenerated("NULL"))
  createdAt        DateTime @default(now())
  startAt          DateTime
  finishAt         DateTime

  @@index([authorId])
}

model Videos{
  id               Int      @id @default(autoincrement())
  type             CalculationsType
  status           CalculationsStatus
  src              String? @default(dbgenerated("NULL"))
  result           String? @default(dbgenerated("NULL"))
  metrics          Json
  idConfigurations Configurations @relation(fields: [confId], references: [id])
  confId           String
  author           User     @relation(fields: [authorId], references: [id])
  authorId         Int
  sentEmail        Boolean? @default(dbgenerated("NULL"))
  errorText        String?  @default(dbgenerated("NULL"))
  createdAt        DateTime @default(now())
  startAt          DateTime
  finishAt         DateTime

  @@index([authorId])
}